name: Deploy Backend to VPS (fixed)

on:
  push:
    branches: ['main']

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to Hostinger VPS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rsync and openssh-client
        run: sudo apt-get update -y && sudo apt-get install -y rsync openssh-client

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          # write private key from secret (normalize CRLFs)
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # add host key (best effort)
          if [ -n "${{ secrets.SSH_PORT }}" ]; then
            ssh-keyscan -p "${{ secrets.SSH_PORT }}" -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts || true
          else
            ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts || true
          fi

      - name: Runner SSH verbose debug (non-failing)
        run: |
          echo "=== Runner SSH verbose debug start ==="
          ssh -vvv -o BatchMode=yes -o IdentitiesOnly=yes -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo RUNNER_SSH_OK' || true
          echo "=== Runner SSH verbose debug end ==="

      - name: Quick SSH connectivity test
        run: |
          ssh -o BatchMode=yes -o IdentitiesOnly=yes -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo SSH_OK' || true

      - name: Print runner private-key fingerprint (debug)
        run: |
          echo "Runner: fingerprint of ~/.ssh/id_rsa (public form)"
          ssh-keygen -y -f ~/.ssh/id_rsa 2>/dev/null | ssh-keygen -lf - || echo "Unable to read ~/.ssh/id_rsa or not a valid key"

      - name: Rsync project to server
        run: |
          RSYNC_RSH="ssh -p ${{ secrets.SSH_PORT }} -o IdentitiesOnly=yes -i ~/.ssh/id_rsa"
          rsync -az --exclude='.git' --exclude='node_modules' --exclude='.env' --exclude='.github' -e "$RSYNC_RSH" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.REMOTE_DIR }}

      - name: Remote install & restart
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o IdentitiesOnly=yes -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "bash -lc '
          set -euo pipefail
          cd \"${{ secrets.REMOTE_DIR }}\"
          if [ -f package-lock.json ]; then npm ci --omit=dev; else npm install --omit=dev; fi
    
          if pm2 describe \"${{ secrets.PM2_APP_NAME }}\" > /dev/null; then
            pm2 restart \"${{ secrets.PM2_APP_NAME }}\" --update-env
          else
            pm2 start index.js --name \"${{ secrets.PM2_APP_NAME }}\" --update-env
          fi
          pm2 save
    
          # healthcheck: retry a few times (2s apart) up to ~30s
          ok=1
          for i in 1 2 3 4 5 6 7 8 9 10; do
            if curl -fsS http://127.0.0.1:3001/ >/dev/null 2>&1; then
              ok=0; break
            fi
            sleep 2
          done
    
          if [ \"$ok\" -ne 0 ]; then
            echo 'Healthcheck failed â€” printing PM2 logs (last 200 lines):'
            pm2 logs \"${{ secrets.PM2_APP_NAME }}\" --lines 200 || true
            exit 2
          fi
    
          echo 'Healthcheck OK'
